#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('buzzer:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server);

var rooms = new Map()

try {
  io.on('connection', socket => {
    socket.emit('join', 'Buzz-tastic');
    // see what room has been joined
    socket.on("room", (roomPayload) => {
      // join the room
      socket.join(roomPayload.room)

      socket.to(roomPayload.room).emit('roomJoin', roomPayload.name)
      // create a list of users
      // find a room, if it doesn't exist. Create a new one
      try {
        if (rooms.has(roomPayload.room)) {
            rooms.set(roomPayload.room, [roomPayload.name, ...rooms.get(roomPayload.room)])
        } else {
          rooms.set(roomPayload.room, [roomPayload.name])
        }
        io.to(roomPayload.room).emit('roomUsers', rooms.get(roomPayload.room))
      } catch (error) {
        throw new Error(error)
      }
      // send the room count
      if (io.sockets.adapter.rooms[roomPayload.room]) {
        io.to(roomPayload.room).emit('roomCount', io.sockets.adapter.rooms[roomPayload.room].length)
      }
      // wait for the message
      socket.on("submittedBy", (payload) => {
        // emit it to the rest of the room
        io.to(roomPayload.room).emit('submittedBy', payload)
      })
      socket.on("clear", () => {
        // emit it to the rest of the room
        io.to(roomPayload.room).emit('clear', true)
      })
      socket.on("disconnect", () => {
        if (io.sockets.adapter.rooms[roomPayload.room]) {
          io.to(roomPayload.room).emit('roomCount', io.sockets.adapter.rooms[roomPayload.room].length)
        }
        if (rooms.has(roomPayload.room)) {
          let roomUsers = rooms.get(roomPayload.room)
          // delete a user when they disconnect
          rooms.set(roomPayload.name, roomUsers.splice(roomUsers.indexOf(roomPayload.name), 1))
          // emit the user list back to the room
          io.to(roomPayload.room).emit('roomUsers', rooms.get(roomPayload.room))
        }
      })
    })
  });
} catch (error) {
  console.error(error)
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
